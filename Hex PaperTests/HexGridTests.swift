//
//  HexGridTests.swift
//  Hex Paper
//
//  Created by Michael Johnson on 5/16/17.
//  Copyright Â© 2017 Michael Johnson. All rights reserved.
//

import XCTest
@testable import Hex_Paper

class HexGridTests: XCTestCase {
    
    func testHexGridWithSingleHex() {
        let hexRadius = 10.0
        let SUT = HexGrid(rows: 1, columns: 1, hexRadius: hexRadius)
        let rowHeight = sin(Double.pi / 3) * hexRadius
        
        XCTAssertEqual(SUT.edges.count, 6)
        let leftVertex = CGPoint(x: 0, y: rowHeight)
        let topLeftVertex = CGPoint(x: 0.5*hexRadius, y: 0)
        let topLeftEdge = Edge(leftVertex, topLeftVertex)
        XCTAssert(SUT.edges.contains(topLeftEdge))
        
        let topRightVertex = CGPoint(x: 1.5*hexRadius, y: 0)
        let topEdge = Edge(topLeftVertex, topRightVertex)
        XCTAssert(SUT.edges.contains(topEdge))
        
        let rightVertex = CGPoint(x: 2*hexRadius, y: rowHeight)
        let topRightEdge = Edge(topRightVertex, rightVertex)
        XCTAssert(SUT.edges.contains(topRightEdge))
        
        let bottomLeftVertex = CGPoint(x: 0.5*hexRadius, y: 2*rowHeight)
        let bottomLeftEdge = Edge(leftVertex, bottomLeftVertex)
        XCTAssert(SUT.edges.contains(bottomLeftEdge))
        
        let bottomRightVertex = CGPoint(x: 1.5*hexRadius, y: 2*rowHeight)
        let bottomEdge = Edge(bottomLeftVertex, bottomRightVertex)
        XCTAssert(SUT.edges.contains(bottomEdge))
        
        let bottomRightEdge = Edge(bottomRightVertex, rightVertex)
        XCTAssert(SUT.edges.contains(bottomRightEdge))
    }
    
    func test1by2HexGrid() {
        let hexRadius = 10.0
        let SUT = HexGrid(rows: 1, columns: 2, hexRadius: hexRadius)
        let rowHeight = sin(Double.pi / 3) * hexRadius
        
        let v1 = CGPoint(x: 0.5 * hexRadius, y:0 )
        let v2 = CGPoint(x: 1.5 * hexRadius, y:0 )
        let v3 = CGPoint(x: 0, y: rowHeight)
        let v4 = CGPoint(x: 2 * hexRadius, y: rowHeight)
        let v5 = CGPoint(x: 3 * hexRadius, y: rowHeight)
        let v6 = CGPoint(x: 0.5 * hexRadius, y: 2 * rowHeight)
        let v7 = CGPoint(x: 1.5 * hexRadius, y: 2 * rowHeight)
        let v8 = CGPoint(x: 3.5 * hexRadius, y: 2 * rowHeight)
        let v9 = CGPoint(x: 2 * hexRadius, y: 3 * rowHeight)
        let v10 = CGPoint(x: 3 * hexRadius, y: 3 * rowHeight)

        let e1 = Edge(v3, v1)
        let e2 = Edge(v1, v2)
        let e3 = Edge(v2, v4)
        let e4 = Edge(v4, v5)
        let e5 = Edge(v3, v6)
        let e6 = Edge(v6, v7)
        let e7 = Edge(v7, v4)
        let e8 = Edge(v5, v8)
        let e9 = Edge(v7, v9)
        let e10 = Edge(v9, v10)
        let e11 = Edge(v10, v8)
        
        XCTAssertEqual(SUT.edges.count, 11)
        XCTAssert(SUT.edges.contains(e1))
        XCTAssert(SUT.edges.contains(e2))
        XCTAssert(SUT.edges.contains(e3))
        XCTAssert(SUT.edges.contains(e4))
        XCTAssert(SUT.edges.contains(e5))
        XCTAssert(SUT.edges.contains(e6))
        XCTAssert(SUT.edges.contains(e7))
        XCTAssert(SUT.edges.contains(e8))
        XCTAssert(SUT.edges.contains(e9))
        XCTAssert(SUT.edges.contains(e10))
        XCTAssert(SUT.edges.contains(e11))
    }
    
    func test2by2HexGrid() {
        let hexRadius = 10.0
        let SUT = HexGrid(rows: 2, columns: 2, hexRadius: hexRadius)
        let rowHeight = sin(Double.pi / 3) * hexRadius
        
        let v1 = CGPoint(x: 0.5 * hexRadius, y:0 )
        let v2 = CGPoint(x: 1.5 * hexRadius, y:0 )

        let v5 = CGPoint(x: 0, y: rowHeight)
        let v6 = CGPoint(x: 2 * hexRadius, y: rowHeight)
        let v7 = CGPoint(x: 3 * hexRadius, y: rowHeight)
        let v10 = CGPoint(x: 0.5 * hexRadius, y: 2 * rowHeight)
        let v11 = CGPoint(x: 1.5 * hexRadius, y: 2 * rowHeight)
        let v12 = CGPoint(x: 3.5 * hexRadius, y: 2 * rowHeight)
        let v15 = CGPoint(x: 0, y: 3 * rowHeight)
        let v16 = CGPoint(x: 2 * hexRadius, y: 3 * rowHeight)
        let v17 = CGPoint(x: 3.0 * hexRadius, y: 3 * rowHeight)
        let v20 = CGPoint(x: 0.5 * hexRadius, y: 4 * rowHeight)
        let v21 = CGPoint(x: 1.5 * hexRadius, y: 4 * rowHeight)
        let v22 = CGPoint(x: 3.5 * hexRadius, y: 4 * rowHeight)
        let v26 = CGPoint(x: 2.0 * hexRadius, y: 5 * rowHeight)
        
        let v27 = CGPoint(x: 3.0 * hexRadius, y: 5 * rowHeight)
        let e1 = Edge(v5, v1)
        let e2 = Edge(v1, v2)
        let e3 = Edge(v2, v6)
        let e4 = Edge(v6, v7)
        
        let e9 = Edge(v5, v10)
        let e10 = Edge(v10, v11)
        let e11 = Edge(v11, v6)
        let e12 = Edge(v7, v12)
        
        let e16 = Edge(v15, v10)
        let e17 = Edge(v11, v16)
        let e18 = Edge(v16, v17)
        let e19 = Edge(v17, v12)
        
        let e23 = Edge(v15, v20)
        let e24 = Edge(v20, v21)
        let e25 = Edge(v21, v16)
        let e26 = Edge(v17, v22)
        
        let e31 = Edge(v21, v26)
        let e32 = Edge(v26, v27)
        let e33 = Edge(v27, v22)
        
        XCTAssertEqual(SUT.edges.count, 19)
        XCTAssert(SUT.edges.contains(e1))
        XCTAssert(SUT.edges.contains(e2))
        XCTAssert(SUT.edges.contains(e3))
        XCTAssert(SUT.edges.contains(e4))
        XCTAssert(SUT.edges.contains(e9))
        XCTAssert(SUT.edges.contains(e10))
        XCTAssert(SUT.edges.contains(e11))
        XCTAssert(SUT.edges.contains(e12))
        XCTAssert(SUT.edges.contains(e16))
        XCTAssert(SUT.edges.contains(e17))
        XCTAssert(SUT.edges.contains(e18))
        XCTAssert(SUT.edges.contains(e19))
        XCTAssert(SUT.edges.contains(e23))
        XCTAssert(SUT.edges.contains(e24))
        XCTAssert(SUT.edges.contains(e25))
        XCTAssert(SUT.edges.contains(e26))
        XCTAssert(SUT.edges.contains(e31))
        XCTAssert(SUT.edges.contains(e32))
        XCTAssert(SUT.edges.contains(e33))
    }
    
    func test4by4HexGrid() {
        let hexRadius = 10.0
        let SUT = HexGrid(rows: 4, columns: 4, hexRadius: hexRadius)
        let rowHeight = sin(Double.pi / 3) * hexRadius
        
        let v1 = CGPoint(x: 0.5 * hexRadius, y:0)
        let v2 = CGPoint(x: 1.5 * hexRadius, y:0)
        let v3 = CGPoint(x: 3.5 * hexRadius, y:0)
        let v4 = CGPoint(x: 4.5 * hexRadius, y:0)
        let v5 = CGPoint(x: 0, y: rowHeight)
        let v6 = CGPoint(x: 2 * hexRadius, y: rowHeight)
        let v7 = CGPoint(x: 3 * hexRadius, y: rowHeight)
        let v8 = CGPoint(x: 5 * hexRadius, y: rowHeight)
        let v9 = CGPoint(x: 6 * hexRadius, y: rowHeight)
        let v10 = CGPoint(x: 0.5 * hexRadius, y: 2 * rowHeight)
        let v11 = CGPoint(x: 1.5 * hexRadius, y: 2 * rowHeight)
        let v12 = CGPoint(x: 3.5 * hexRadius, y: 2 * rowHeight)
        let v13 = CGPoint(x: 4.5 * hexRadius, y: 2 * rowHeight)
        let v14 = CGPoint(x: 6.5 * hexRadius, y: 2 * rowHeight)
        let v15 = CGPoint(x: 0, y: 3 * rowHeight)
        let v16 = CGPoint(x: 2 * hexRadius, y: 3 * rowHeight)
        let v17 = CGPoint(x: 3.0 * hexRadius, y: 3 * rowHeight)
        let v18 = CGPoint(x: 5.0 * hexRadius, y: 3 * rowHeight)
        let v19 = CGPoint(x: 6.0 * hexRadius, y: 3 * rowHeight)
        let v20 = CGPoint(x: 0.5 * hexRadius, y: 4 * rowHeight)
        let v21 = CGPoint(x: 1.5 * hexRadius, y: 4 * rowHeight)
        let v22 = CGPoint(x: 3.5 * hexRadius, y: 4 * rowHeight)
        let v23 = CGPoint(x: 4.5 * hexRadius, y: 4 * rowHeight)
        let v24 = CGPoint(x: 6.5 * hexRadius, y: 4 * rowHeight)
        let v25 = CGPoint(x: 0, y: 5 * rowHeight)
        let v26 = CGPoint(x: 2.0 * hexRadius, y: 5 * rowHeight)
        let v27 = CGPoint(x: 3.0 * hexRadius, y: 5 * rowHeight)
        let v28 = CGPoint(x: 5.0 * hexRadius, y: 5 * rowHeight)
        let v29 = CGPoint(x: 6.0 * hexRadius, y: 5 * rowHeight)
        let v30 = CGPoint(x: 0.5 * hexRadius, y: 6 * rowHeight)
        let v31 = CGPoint(x: 1.5 * hexRadius, y: 6 * rowHeight)
        let v32 = CGPoint(x: 3.5 * hexRadius, y: 6 * rowHeight)
        let v33 = CGPoint(x: 4.5 * hexRadius, y: 6 * rowHeight)
        let v34 = CGPoint(x: 6.5 * hexRadius, y: 6 * rowHeight)
        let v35 = CGPoint(x: 0, y: 7 * rowHeight)
        let v36 = CGPoint(x: 2 * hexRadius, y: 7 * rowHeight)
        let v37 = CGPoint(x: 3 * hexRadius, y: 7 * rowHeight)
        let v38 = CGPoint(x: 5 * hexRadius, y: 7 * rowHeight)
        let v39 = CGPoint(x: 6 * hexRadius, y: 7 * rowHeight)
        let v40 = CGPoint(x: 0.5 * hexRadius, y: 8 * rowHeight)
        let v41 = CGPoint(x: 1.5 * hexRadius, y: 8 * rowHeight)
        let v42 = CGPoint(x: 3.5 * hexRadius, y: 8 * rowHeight)
        let v43 = CGPoint(x: 4.5 * hexRadius, y: 8 * rowHeight)
        let v44 = CGPoint(x: 6.5 * hexRadius, y: 8 * rowHeight)
        let v45 = CGPoint(x: 2 * hexRadius, y: 9 * rowHeight)
        let v46 = CGPoint(x: 3 * hexRadius, y: 9 * rowHeight)
        let v47 = CGPoint(x: 5 * hexRadius, y: 9 * rowHeight)
        let v48 = CGPoint(x: 6 * hexRadius, y: 9 * rowHeight)
        
        let e1 = Edge(v5, v1)
        let e2 = Edge(v1, v2)
        let e3 = Edge(v2, v6)
        let e4 = Edge(v6, v7)
        let e5 = Edge(v7, v3)
        let e6 = Edge(v3, v4)
        let e7 = Edge(v4, v8)
        let e8 = Edge(v8, v9)
        
        let e9 = Edge(v5, v10)
        let e10 = Edge(v10, v11)
        let e11 = Edge(v11, v6)
        let e12 = Edge(v7, v12)
        let e13 = Edge(v12, v13)
        let e14 = Edge(v13, v8)
        let e15 = Edge(v9, v14)
        
        let e16 = Edge(v15, v10)
        let e17 = Edge(v11, v16)
        let e18 = Edge(v16, v17)
        let e19 = Edge(v17, v12)
        let e20 = Edge(v13, v18)
        let e21 = Edge(v18, v19)
        let e22 = Edge(v19, v14)
                       
        let e23 = Edge(v15, v20)
        let e24 = Edge(v20, v21)
        let e25 = Edge(v21, v16)
        let e26 = Edge(v17, v22)
        let e27 = Edge(v22, v23)
        let e28 = Edge(v23, v18)
        let e29 = Edge(v19, v24)
        let e30 = Edge(v25, v20)
        let e31 = Edge(v21, v26)
        let e32 = Edge(v26, v27)
        let e33 = Edge(v27, v22)
        let e34 = Edge(v23, v28)
        let e35 = Edge(v28, v29)
        let e36 = Edge(v29, v24)
        
        let e37 = Edge(v25, v30)
        let e38 = Edge(v30, v31)
        let e39 = Edge(v31, v26)
        let e40 = Edge(v27, v32)
        let e41 = Edge(v32, v33)
        let e42 = Edge(v33, v28)
        let e43 = Edge(v29, v34)
        
        let e44 = Edge(v35, v30)
        let e45 = Edge(v31, v36)
        let e46 = Edge(v36, v37)
        let e47 = Edge(v37, v32)
        let e48 = Edge(v33, v38)
        let e49 = Edge(v38, v39)
        let e50 = Edge(v39, v34)
        let e51 = Edge(v35, v40)
        let e52 = Edge(v40, v41)
        let e53 = Edge(v41, v36)
        let e54 = Edge(v37, v42)
        let e55 = Edge(v42, v43)
        let e56 = Edge(v43, v38)
        let e57 = Edge(v39, v44)
        
        let e58 = Edge(v41, v45)
        let e59 = Edge(v45, v46)
        let e60 = Edge(v46, v42)
        let e61 = Edge(v43, v47)
        let e62 = Edge(v47, v48)
        let e63 = Edge(v48, v44)
        
        XCTAssertEqual(SUT.edges.count, 63)
        XCTAssert(SUT.edges.contains(e1))
        XCTAssert(SUT.edges.contains(e2))
        XCTAssert(SUT.edges.contains(e3))
        XCTAssert(SUT.edges.contains(e4))
        XCTAssert(SUT.edges.contains(e5))
        XCTAssert(SUT.edges.contains(e6))
        XCTAssert(SUT.edges.contains(e7))
        XCTAssert(SUT.edges.contains(e8))
        XCTAssert(SUT.edges.contains(e9))
        XCTAssert(SUT.edges.contains(e10))
        XCTAssert(SUT.edges.contains(e11))
        XCTAssert(SUT.edges.contains(e12))
        XCTAssert(SUT.edges.contains(e13))
        XCTAssert(SUT.edges.contains(e14))
        XCTAssert(SUT.edges.contains(e15))
        XCTAssert(SUT.edges.contains(e16))
        XCTAssert(SUT.edges.contains(e17))
        XCTAssert(SUT.edges.contains(e18))
        XCTAssert(SUT.edges.contains(e19))
        XCTAssert(SUT.edges.contains(e20))
        XCTAssert(SUT.edges.contains(e21))
        XCTAssert(SUT.edges.contains(e22))
        XCTAssert(SUT.edges.contains(e23))
        XCTAssert(SUT.edges.contains(e24))
        XCTAssert(SUT.edges.contains(e25))
        XCTAssert(SUT.edges.contains(e26))
        XCTAssert(SUT.edges.contains(e27))
        XCTAssert(SUT.edges.contains(e28))
        XCTAssert(SUT.edges.contains(e29))
        XCTAssert(SUT.edges.contains(e30))
        XCTAssert(SUT.edges.contains(e31))
        XCTAssert(SUT.edges.contains(e32))
        XCTAssert(SUT.edges.contains(e33))
        XCTAssert(SUT.edges.contains(e34))
        XCTAssert(SUT.edges.contains(e35))
        XCTAssert(SUT.edges.contains(e36))
        XCTAssert(SUT.edges.contains(e37))
        XCTAssert(SUT.edges.contains(e38))
        XCTAssert(SUT.edges.contains(e39))
        XCTAssert(SUT.edges.contains(e40))
        XCTAssert(SUT.edges.contains(e41))
        XCTAssert(SUT.edges.contains(e42))
        XCTAssert(SUT.edges.contains(e43))
        XCTAssert(SUT.edges.contains(e44))
        XCTAssert(SUT.edges.contains(e45))
        XCTAssert(SUT.edges.contains(e46))
        XCTAssert(SUT.edges.contains(e47))
        XCTAssert(SUT.edges.contains(e48))
        XCTAssert(SUT.edges.contains(e49))
        XCTAssert(SUT.edges.contains(e50))
        XCTAssert(SUT.edges.contains(e51))
        XCTAssert(SUT.edges.contains(e52))
        XCTAssert(SUT.edges.contains(e53))
        XCTAssert(SUT.edges.contains(e54))
        XCTAssert(SUT.edges.contains(e55))
        XCTAssert(SUT.edges.contains(e56))
        XCTAssert(SUT.edges.contains(e57))
        XCTAssert(SUT.edges.contains(e58))
        XCTAssert(SUT.edges.contains(e59))
        XCTAssert(SUT.edges.contains(e60))
        XCTAssert(SUT.edges.contains(e61))
        XCTAssert(SUT.edges.contains(e62))
        XCTAssert(SUT.edges.contains(e63))        
    }
    
    func testInitWithWidthAndHeight() {
        let SUT = HexGrid(width: 10, height: 10, hexRadius: 20)
        
        let expectedEdges = HexGrid(rows: 1, columns: 1, hexRadius: 20).edges
        
        XCTAssertEqual(SUT.edges, expectedEdges)
    }
    
    func testInitWithWidthAndHeight2() {
        let SUT = HexGrid(width: 50, height: 40, hexRadius: 20)
        
        let expectedEdges = HexGrid(rows: 2, columns: 2, hexRadius: 20).edges
        
        XCTAssertEqual(SUT.edges, expectedEdges)
    }
}
